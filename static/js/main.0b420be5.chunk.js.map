{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfInfo/ProfileInfo.module.css","components/Navbar/Navbar.module.css","components/Login/Login.module.css","asets/images/preloader.gif","components/common/preloader/Preloader.module.css","components/Profile/Post/Post.module.css","asets/images/user.png","serviceWorker.js","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/Login/Login.jsx","components/Header/Header.jsx","api/api.js","api/auth-api.js","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/common/preloader/Preloader.jsx","components/Profile/ProfInfo/ProfileStatus.jsx","components/Profile/ProfInfo/ProfileInfo.jsx","api/profile-api.js","redux/profile-reducer.js","components/Profile/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/hoc/withAuthRedirect.jsx","components/Profile/ProfileContainer.jsx","redux/dialogs-reducer.js","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","api/user-api.js","redux/users-reducer.js","components/Users/Users.jsx","components/Users/UsersContainer.jsx","App.js","redux/redux-store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","active","to","activeClassName","activeLink","News","props","content","Music","Settings","Login","login","Header","header","alt","src","logo_name","isAuth","instance","axios","withCredentials","baseURL","headers","authAPI","get","initializeState","id","email","isFetching","authReducer","state","action","type","data","HeaderContainer","this","getAuthUserData","React","Component","connect","auth","dispatch","then","response","resultCode","setAuthUserData","Preloader","preloader","ProfileStatus","editMode","status","activatedMode","setState","deactivatedMode","updateOwnProfileStatus","onStatusChange","e","currentTarget","value","componentDidUpdate","prevProps","prevState","onClick","onChange","autoFocus","onBlur","ProfileInfo","profile","descriptionBlock","personalPhoto","photos","large","aboutMe","contacts","instagram","lookingForAJob","userId","lookingForAJobDescription","profileAPI","res","put","posts","message","likesCount","newPostText","profileReducer","newPost","newText","userStatus","Post","MyPosts","postsElements","map","p","newPostElement","createRef","postsBlock","text","current","updateNewPostText","placeholder","cols","rows","ref","addPost","add_post","MyPostsContainer","profilePage","updateNewPostTextActionCreator","Profile","mapStateToPropsForRedirect","withAuthRedirect","RedirectComponent","ProfileContainer","componentDidMount","params","getUserProfileData","getStatusFomUser","compose","setOwnProfileStatus","withRouter","dialogs","name","messages","newMessageText","dialogsReducer","newMessage","Message","DialogItem","path","dialog","Dialogs","dialogsPage","dialogsElements","d","Dialog","key","messagesElements","m","newMessageElement","dialogsItems","addMessage","updateNewMessageText","updateNewMessageTextActionCreator","usersAPI","currentPage","pageSize","post","delete","users","totalUsersCount","followingInProgress","toggleIsFetching","toggleFollowingProgress","usersReducer","u","followed","count","filter","Users","pages","i","push","users_wrapper","selectPage","onPageChanged","user","avatar","small","userPhoto","disabled","some","unfollow_button","unfollow","follow_button","follow","UsersContainer","pageNumber","getUsers","setCurrentPage","usersPage","followSuccess","unfollowSuccess","items","totalCount","App","render","DialogsContainer","reducers","combineReducers","store","createStore","applyMiddleware","thinkMiddlaware","rerenderEntireTree","ReactDOM","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0b420be5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3OFj2\",\"dialog\":\"Dialogs_dialog__3fVZr\",\"dialogsItems\":\"Dialogs_dialogsItems__3fcb5\",\"messages\":\"Dialogs_messages__39mll\",\"addMessage\":\"Dialogs_addMessage__1fBss\",\"add_post\":\"Dialogs_add_post__2QLIl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_wrapper\":\"Users_users_wrapper__1ZOyV\",\"selectPage\":\"Users_selectPage__1cRU0\",\"avatar\":\"Users_avatar__1H79U\",\"follow_button\":\"Users_follow_button__33hVr\",\"unfollow_button\":\"Users_unfollow_button__B7zj3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2jO0p\",\"logo_name\":\"Header_logo_name__3P1L2\",\"login\":\"Header_login__F3Un5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3ogJB\",\"posts\":\"MyPosts_posts__32EhU\",\"add_post\":\"MyPosts_add_post__3RIGb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1vx3c\",\"imageProfile\":\"ProfileInfo_imageProfile__3w2xH\",\"personalPhoto\":\"ProfileInfo_personalPhoto__1YfGp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3JSLM\",\"item\":\"Navbar_item__tfWnZ\",\"activeLink\":\"Navbar_activeLink__DEEo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1UrQg\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.d5c02aa6.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__3NrQu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1B3C-\"};","module.exports = __webpack_public_path__ + \"static/media/user.abb5b607.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'Settings content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            This will be news\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;\r\n\r\n","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;\r\n\r\n","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;\r\n\r\n","import React from 'react';\r\nimport s from './Login.module.css';\r\n\r\nconst Login = (props) => {\r\n    return (\r\n        <div className={s.login}>\r\n            login page  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img alt={'header'} src=\"https://img.icons8.com/carbon-copy/100/000000/minecraft-logo.png\" />\r\n            <div className={s.logo_name}>Social netWork</div>\r\n            <div className={s.login}>\r\n                {props.isAuth ? props.login:<NavLink to={'/login'}>Login</NavLink>}\r\n                \r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n","import * as axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n\twithCredentials: true,\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n\theaders: {\r\n\t\t'API-KEY': 'ec9092bf-d7c1-484e-b4e6-892ed49a92ea'\r\n\t}\r\n});\r\n\r\n\r\n\r\n\r\n","import {instance} from './api';\r\n\r\nexport const authAPI = {\r\n   authMe() {\r\n      return instance.get(`auth/me`)\r\n   },\r\n}","import {authAPI} from '../api/auth-api';\r\n\r\nconst TOGGLE_IS_FETCHING = 'IS_FETCHING';\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nlet initializeState = {\r\n   id: null,\r\n   email: null,\r\n   login: null,\r\n   isFetching: true,\r\n   isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initializeState, action) => {\r\n   switch (action.type) {\r\n      case SET_USER_DATA:\r\n\r\n         return {\r\n            ...state,\r\n            ...action.data,\r\n            isAuth: true\r\n         };\r\n      case TOGGLE_IS_FETCHING: {\r\n         return {...state, isFetching: action.isFetching}\r\n      }\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (id, email, login) => (\r\n   {type: SET_USER_DATA, data: {id, email, login}});\r\nexport const toggleIsFetching = (isFetching) => (\r\n   {type: TOGGLE_IS_FETCHING, isFetching});\r\n\r\nexport default authReducer;\r\n\r\nexport const getAuthUserData = () => {\r\n   return (dispatch) => {\r\n      authAPI.authMe()\r\n         .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n               let {id, login, email} = response.data.data;\r\n               dispatch(setAuthUserData(id, login, email));\r\n            }\r\n         });\r\n   }\r\n}","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { getAuthUserData } from '../../redux/auth-reducer';\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData()\r\n        //old request which add to thunk and API(DAL)\r\n        // .then(response => {\r\n        //         if (response.data.resultCode === 0) {\r\n        //             let { id, login, email } = response.data.data;\r\n        //             this.props.setAuthUserData(id, login, email);\r\n        //         }\r\n        //     });\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\r\n        //     withCredentials: true\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { getAuthUserData })(HeaderContainer);\r\n\r\n","import React from \"react\";\r\nimport preloader from \"../../../asets/images/preloader.gif\";\r\nimport s from './Preloader.module.css';\r\n\r\n\r\nlet Preloader = () => {\r\n\treturn <div><img alt={'preloader'} className={s.preloader} src={preloader} /></div>\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n   state = {\r\n      editMode: false,\r\n      status: this.props.status\r\n   }\r\n   activatedMode = () => {\r\n      this.setState({editMode: true})\r\n   }\r\n   deactivatedMode = () => {\r\n      this.setState({editMode: false})\r\n      this.props.updateOwnProfileStatus(this.state.status)\r\n   }\r\n   onStatusChange = (e) => {\r\n      this.setState({status: e.currentTarget.value})\r\n   }\r\n\r\n   componentDidUpdate = (prevProps, prevState) => {\r\n      if (prevProps.status !== this.props.status) {\r\n         this.setState({\r\n            status: this.props.status\r\n         })\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            {!this.state.editMode &&\r\n            <div>\r\n               <span onClick={this.activatedMode}>\r\n                  {this.props.status || '-----'}\r\n               </span>\r\n            </div>}\r\n            {this.state.editMode &&\r\n            <div>\r\n               <input onChange={this.onStatusChange}\r\n                      autoFocus={true}\r\n                      onBlur={this.deactivatedMode}\r\n                      value={this.state.status}/>\r\n            </div>}\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\nconst ProfileInfo = (props) => {\r\n   if (!props.profile) {\r\n      return <Preloader/>\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <div className={s.descriptionBlock}>\r\n            <img alt={'Images'} className={s.personalPhoto} src={props.profile.photos.large}/>\r\n            <div>\r\n               <ProfileStatus status={props.status} updateOwnProfileStatus={props.updateOwnProfileStatus}/>\r\n            </div>\r\n            <p>{props.profile.aboutMe}</p>\r\n            <p>{props.profile.contacts.instagram}</p>\r\n            <p>{props.profile.lookingForAJob}</p>\r\n            <p>{props.profile.userId}</p>\r\n            <p>{props.profile.lookingForAJobDescription}</p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n","import {instance} from './api';\r\n\r\nexport const profileAPI = {\r\n   getProfile(userId) {\r\n      return instance.get(`profile/${userId}`)\r\n         .then(res => {\r\n            return res.data\r\n         });\r\n   },\r\n\r\n   getUserStatus(userId) {\r\n      return instance.get(`profile/status/${userId}`)\r\n         .then(res => res);\r\n   },\r\n\r\n   updateOwnProfileStatus(status) {\r\n      return instance.put(`profile/status/`,{status})\r\n         .then(res => {\r\n            return res.data\r\n         });\r\n   },\r\n}","import {profileAPI} from '../api/profile-api';\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst GET_USER_PROFILE_STATUS = 'SET-USER-PROFILE-STATUS';\r\nconst SET_OWN_PROFILE_STATUS = 'UPDATE-PROFILE-STATUS';\r\n\r\nlet initializeState = {\r\n   posts: [\r\n      {id: 1, message: 'Hi, how do you feel? I have not seen you since I was in Berlin!', likesCount: 12},\r\n      {id: 2, message: 'Wow! It is great! When are you going there?', likesCount: 12}\r\n   ],\r\n   newPostText: '',\r\n   profile: null,\r\n   status: '',\r\n};\r\n\r\nconst profileReducer = (state = initializeState, action) => {\r\n   switch (action.type) {\r\n      case ADD_POST:\r\n         let newPost = {\r\n            id: 3,\r\n            message: state.newPostText,\r\n            likesCount: 0\r\n         };\r\n         return {\r\n            ...state,\r\n            posts: [newPost,...state.posts],\r\n            newPostText: ''\r\n         };\r\n      case UPDATE_NEW_POST_TEXT: {\r\n         return {\r\n            ...state,\r\n            newPostText: action.newText\r\n         };\r\n      }\r\n      case SET_USER_PROFILE: {\r\n         return {\r\n            ...state,\r\n            profile: action.profile\r\n         };\r\n      }\r\n      case GET_USER_PROFILE_STATUS: {\r\n         return {\r\n            ...state,\r\n            status: action.userStatus\r\n         };\r\n      }\r\n      case SET_OWN_PROFILE_STATUS: {\r\n         return {\r\n            ...state,\r\n            status: action.status\r\n         };\r\n      }\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST});\r\nexport const updateNewPostTextActionCreator = (text) =>\r\n   ({type: UPDATE_NEW_POST_TEXT, newText: text});\r\n\r\nexport const setUserProfileData = (profile) =>\r\n   ({type: SET_USER_PROFILE, profile})\r\n\r\n//STATUS\r\nexport const getUserStatus = (userStatus) => ({type: GET_USER_PROFILE_STATUS, userStatus});\r\nexport const setOwnProfileStatus = (status) => ({type: SET_OWN_PROFILE_STATUS, status});\r\n\r\n\r\n//Thunks\r\nexport const getUserProfileData = (userId) => {\r\n   return (dispatch) => {\r\n      profileAPI.getProfile(userId)\r\n         .then(data => {\r\n            dispatch(setUserProfileData(data));\r\n         });\r\n   }\r\n}\r\n\r\nexport const getStatusFomUser = (userId) => (dispatch) => {\r\n   profileAPI.getUserStatus(userId)\r\n      .then(res => {\r\n         dispatch(getUserStatus(res.data));\r\n      });\r\n}\r\n\r\nexport const updateOwnProfileStatus = (status) => (dispatch) => {\r\n   profileAPI.updateOwnProfileStatus(status)\r\n      .then(data => {\r\n         if (data.resultCode === 0) {\r\n            dispatch(setOwnProfileStatus(status));\r\n         }\r\n      });\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return <div className={s.item}>\r\n        <img alt={'post'} src=\"https://img.icons8.com/bubbles/100/000000/flag-person-male.png\"/>\r\n        <div>\r\n            {props.message}\r\n            <span> Like</span> {props.likesCount}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from '../Post/Post';\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange}\r\n                              placeholder='Add post'\r\n                              cols='45'\r\n                              rows='5'\r\n                              ref={newPostElement}\r\n                              value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost} className={s.add_post}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;\r\n\r\n","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n//вариинт без создания connect\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState();\r\n//                 let onAddPost = () => {\r\n//                     store.dispatch(addPostActionCreator());\r\n//                 }\r\n//\r\n//                 let onPostChange = (text) => {\r\n//                     let action = updateNewPostTextActionCreator(text)\r\n//                     store.dispatch(action);\r\n//                 }\r\n//\r\n//                 return <MyPosts\r\n//                     addPost={onAddPost}\r\n//                     updateNewPostText={onPostChange}\r\n//                     posts={state.profilePage.posts}\r\n//                     newPostText={state.profilePage.newPostText}/>\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator());\r\n        },\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\n//map to presentation component\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n   return (\r\n      <div>\r\n         <ProfileInfo profile={props.profile}\r\n                      status={props.status}\r\n                      updateOwnProfileStatus={props.updateOwnProfileStatus}/>\r\n         <MyPostsContainer/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n   isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n   class RedirectComponent extends React.Component {\r\n      render() {\r\n         if (!this.props.isAuth) return <Redirect to='/login'/>\r\n         return <Component {...this.props}/>\r\n      }\r\n   }\r\n\r\n   let ConnnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n   return ConnnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport Profile from './Profile';\r\nimport {getStatusFomUser, getUserProfileData, updateOwnProfileStatus} from '../../redux/profile-reducer';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../hoc/withAuthRedirect';\r\n\r\nclass ProfileContainer extends React.Component {\r\n   componentDidMount = () => {\r\n      let userId = this.props.match.params.userId;\r\n      if (!userId) {\r\n         userId = 7567\r\n      }\r\n      this.props.getUserProfileData(userId);\r\n      this.props.getStatusFomUser(userId);\r\n   }\r\n\r\n   render() {\r\n      return <Profile {...this.props}\r\n                      profile={this.props.profile}\r\n                      status={this.props.status}\r\n                      updateOwnProfileStatus={this.props.updateOwnProfileStatus}/>\r\n   }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n   profile: state.profilePage.profile,\r\n   status: state.profilePage.status,\r\n})\r\n\r\n\r\nexport default compose(\r\n   connect(mapStateToProps, {getUserProfileData, getStatusFomUser, updateOwnProfileStatus}),\r\n   withRouter,\r\n   withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n","const SEND_MESSAGE = 'ADD-MESSAGE';\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\n\r\nlet initializeState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'I can met with you'}\r\n    ],\r\n    newMessageText: ''\r\n};\r\n\r\nconst dialogsReducer = (state = initializeState, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let newMessage = {\r\n                id: 4,\r\n                message: state.newMessageText\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n                newMessageText: ''\r\n            };\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newText\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE});\r\nexport const updateNewMessageTextActionCreator = (text) => ({type: UPDATE_NEW_MESSAGE_TEXT, newText: text});\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./Dialog/Dialog\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    let newMessageElement = React.createRef();\r\n\r\n    let onSendMessage = () => {\r\n        props.addMessage();\r\n    }\r\n    let onMessageChange = () => {\r\n        let text = newMessageElement.current.value;\r\n        props.updateNewMessageText(text);\r\n    }\r\n    //return login page\r\n    if(!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div className={s.addMessage}>\r\n                <textarea onChange={onMessageChange}\r\n                          placeholder='Enter your message'\r\n                          cols='35'\r\n                          rows='5'\r\n                          ref={newMessageElement}\r\n                          value={props.newMessageText}/>\r\n                    <div>\r\n                        <button onClick={onSendMessage} className={s.add_post}>Send message</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { sendMessageCreator, updateNewMessageTextActionCreator, }\r\n    from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\n\r\n// const DialogsContainer = () => {\r\n// return (\r\n//     <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().dialogsPage;\r\n//             let onAddMessage = () => {\r\n//                 store.dispatch(sendMessageCreator());\r\n//             }\r\n//             let onMessageChange = (text) => {\r\n//                 let action = updateNewMessageTextCreator(text)\r\n//                 store.dispatch(action);\r\n//             }\r\n//             return <Dialogs\r\n//                 addMessage={onAddMessage}\r\n//                 updateNewMessageText={onMessageChange}\r\n//                 dialogsPage={state}/>\r\n//             }\r\n//         }\r\n//     </StoreContext.Consumer>)\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: () => {\r\n            dispatch(sendMessageCreator())\r\n        },\r\n        updateNewMessageText: (text) => {\r\n            let action = updateNewMessageTextActionCreator(text);\r\n            dispatch(action);\r\n        },\r\n    }\r\n}\r\n// wrapper for action in compose\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import {instance, profileAPI} from './api';\r\n\r\nexport const usersAPI = {\r\n\r\n\tgetUsers(currentPage = 1, pageSize = 10) {\r\n\t\treturn instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.data;\r\n\t\t\t});\r\n\t},\r\n\tfollow(userId) {\r\n\t\treturn instance.post(`follow/${userId}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.data;\r\n\t\t\t});\r\n\t},\r\n\tunfollow(userId) {\r\n\t\treturn instance.delete(`follow/${userId}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.data;\r\n\t\t\t});\r\n\t},\r\n}","import {usersAPI} from '../api/user-api';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'TOGGLE_IS_FOLLOWING_IN_PROGRESS';\r\n\r\nlet initializeState = {\r\n   users: [],\r\n   pageSize: 5,\r\n   totalUsersCount: 0,\r\n   currentPage: 1,\r\n   isFetching: true,\r\n   followingInProgress: [1, 2]\r\n};\r\n\r\nconst usersReducer = (state = initializeState, action) => {\r\n   switch (action.type) {\r\n      case FOLLOW:\r\n         return {\r\n            ...state,\r\n            users: state.users.map(u => {\r\n               if (u.id === action.userId) {\r\n                  return {...u, followed: true}\r\n               }\r\n               return u;\r\n            })\r\n         };\r\n      case UNFOLLOW:\r\n         return {\r\n            ...state,\r\n            users: state.users.map(u => {\r\n               if (u.id === action.userId) {\r\n                  return {...u, followed: false}\r\n               }\r\n               return u;\r\n            })\r\n         };\r\n      case SET_USERS: {\r\n         return {...state, users: action.users}\r\n      }\r\n      case SET_CURRENT_PAGE: {\r\n         return {...state, currentPage: action.currentPage}\r\n      }\r\n      case SET_TOTAL_USERS_COUNT: {\r\n         return {...state, totalUsersCount: action.count}\r\n      }\r\n      case TOGGLE_IS_FETCHING: {\r\n         return {...state, isFetching: action.isFetching}\r\n      }\r\n      case TOGGLE_IS_FOLLOWING_IN_PROGRESS: {\r\n         return {\r\n            ...state,\r\n            followingInProgress: action.isFetching\r\n               ? [...state.followingInProgress, action.userId]\r\n               : state.followingInProgress.filter(id => id !== action.userId)\r\n         }\r\n      }\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId});\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId});\r\nexport const setUsers = (users) => ({type: SET_USERS, users});\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setUsersTotalCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount});\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n   type: TOGGLE_IS_FOLLOWING_IN_PROGRESS,\r\n   isFetching,\r\n   userId\r\n});\r\n\r\n\r\n//thunks users\r\nexport const getUsers = (currentPage, pageSize) => {\r\n\r\n   return (dispatch) => {\r\n      dispatch(toggleIsFetching(true))\r\n      usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n         dispatch(toggleIsFetching(false))\r\n         dispatch(setUsers(data.items))\r\n         dispatch(setUsersTotalCount(data.totalCount))\r\n      });\r\n   }\r\n}\r\n\r\nexport const follow = (userId) => {\r\n\r\n   return (dispatch) => {\r\n      dispatch(toggleFollowingProgress(true, userId));\r\n      usersAPI.follow(userId)\r\n         .then(response => {\r\n            if (response.resultCode === 0) {\r\n               dispatch(followSuccess(userId));\r\n            }\r\n            dispatch(toggleFollowingProgress(false, userId));\r\n         });\r\n   }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n\r\n   return (dispatch) => {\r\n      dispatch(toggleFollowingProgress(true, userId));\r\n      usersAPI.unfollow(userId)\r\n         .then(response => {\r\n            if (response.resultCode === 0) {\r\n               dispatch(unfollowSuccess(userId));\r\n            }\r\n            dispatch(toggleFollowingProgress(false, userId));\r\n         });\r\n   }\r\n}\r\n\r\n\r\nexport default usersReducer;","import React from \"react\";\r\nimport s from './Users.module.css';\r\nimport userPhoto from '../../asets/images/user.png'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nlet Users = (props) => {\r\n    //вычисляем кол-во страниц для отрисовки\r\n    let pages = []\r\n    for (let i = 505; i <= 525; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div className={s.users_wrapper}>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p && s.selectPage}\r\n                        onClick={(e) => {\r\n                            props.onPageChanged(p);\r\n                        }}>{p}</span>\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                    <div className={s.user}>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <img alt={'user'} className={s.avatar} src={u.photos.small != null ? u.photos.small : userPhoto} />\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingInProgress.some(id => id === u.id)} className={s.unfollow_button} \r\n                                    onClick={() => {\r\n                                    props.unfollow(u.id)   \r\n                                    //give this to thunk in users-reducer\r\n                                    // props.toggleFollowingProgress(true, u.id);\r\n                                    // usersAPI.unfollow(u.id)\r\n                                    //     .then(response => {\r\n                                    //         if (response.resultCode == 0) {\r\n                                    //             props.unfollow(u.id);\r\n                                    //         }\r\n                                    //         props.toggleFollowingProgress(false, u.id);\r\n                                    //     })\r\n                                    //old request for delete\r\n                                    // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {\r\n                                    //     withCredentials: true,\r\n                                    //     headers: {\r\n                                    //         'API-KEY': 'be9a3549-d8d6-4d97-a73c-6593dde1f694'}})\r\n                                }}>Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)} className={s.follow_button} \r\n                                    onClick={() => {\r\n                                    props.follow(u.id)\r\n                                    //give this to thunk in users-reducer\r\n                                    // props.toggleFollowingProgress(true, u.id);\r\n                                    // usersAPI.follow(u.id)\r\n                                    // .then(response => {\r\n                                    //         if (response.resultCode == 0) {\r\n                                    //             props.follow(u.id);\r\n                                    //         }\r\n                                    //         props.toggleFollowingProgress(false, u.id);\r\n                                    //     })\r\n                                    //old request for post\r\n                                    // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,{}, {\r\n                                    //     withCredentials: true,\r\n                                    //     headers: {\r\n                                    //         'API-KEY': 'be9a3549-d8d6-4d97-a73c-6593dde1f694'\r\n                                    //     }})\r\n                                }}>Follow</button>}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </div>\r\n                    <div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                        <div>{\"u.location.country\"}</div>\r\n                    </div>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow,\r\n    toggleFollowingProgress,\r\n    getUsers,\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        //old method which contain thunk now\r\n        /*usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(data.items)\r\n            this.props.setUsersTotalCount(data.totalCount)\r\n        });*/\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n        this.props.setCurrentPage(pageNumber);\r\n\r\n        //old method which contain thunk now but use another data(pageNumber)\r\n        /*this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n        usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(data.items)\r\n        });*/\r\n    }\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            <Users pageSize={this.props.pageSize}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                unfollow={this.props.unfollow}\r\n                follow={this.props.follow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n/*const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId));\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setUsersTotalCount: (totalCount) => {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\n// wrapper for action in compose\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage,\r\n        toggleFollowingProgress, getUsers,\r\n    }),\r\n    withAuthRedirect\r\n)(UsersContainer)","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport {Route} from 'react-router-dom';\nimport Login from './components/Login/Login';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\n\nconst App = (props) => {\n   return (\n      <div className='all_wrapper'>\n         <div className='app-wrapper'>\n            <HeaderContainer/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n               <Route path='/login' render={() => <Login/>}/>\n               <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n               <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n               <Route path='/news' render={() => <News/>}/>\n               <Route path='/music' render={() => <Music/>}/>\n               <Route path='/settings' render={() => <Settings/>}/>\n               <Route path='/users' render={() => <UsersContainer/>}/>\n            </div>\n         </div>\n      </div>\n   );\n}\n\nexport default App;\n\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thinkMiddlaware from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n\t//login page\r\n\tprofilePage: profileReducer,\r\n\tdialogsPage: dialogsReducer,\r\n\tusersPage: usersReducer,\r\n\tauth: authReducer\r\n});\r\n\r\nlet store = createStore(reducers,applyMiddleware(thinkMiddlaware));\r\nwindow.store = store;\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/redux-store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n//перерисовка всего\nlet rerenderEntireTree = (state) => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>, document.getElementById('root')\n    );\n}\n//вызываем рендер и передаём параметр стора getstate,который\n//возвращает store\nrerenderEntireTree(store.getState());\nstore.subscribe(() => {\n    let state = store.getState();\n    rerenderEntireTree(state);\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}