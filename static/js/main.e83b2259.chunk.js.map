{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfInfo/ProfileInfo.module.css","components/Navbar/Navbar.module.css","components/Login/Login.module.css","asets/images/preloader.gif","components/common/preloader/Preloader.module.css","components/Profile/Post/Post.module.css","asets/images/user.png","serviceWorker.js","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/Login/Login.jsx","components/Header/Header.jsx","api/api.js","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/common/preloader/Preloader.jsx","components/Profile/ProfInfo/ProfileStatus.jsx","components/Profile/ProfInfo/ProfileInfo.jsx","redux/profile-reducer.js","components/Profile/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/hoc/withAuthRedirect.jsx","components/Profile/ProfileContainer.jsx","redux/dialogs-reducer.js","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","redux/users-reducer.js","components/Users/Users.jsx","components/Users/UsersContainer.jsx","App.js","redux/redux-store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","active","to","activeClassName","activeLink","News","props","content","Music","Settings","Login","login","Header","header","src","logo_name","isAuth","instance","axios","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","initializeState","id","email","isFetching","authReducer","state","action","type","HeaderContainer","this","getAuthUserData","React","Component","connect","auth","dispatch","resultCode","setAuthUserData","Preloader","preloader","ProfileStatus","editMode","activatedMode","setState","deactivatedMode","onStatusChange","e","currentTarget","value","onDoubleClick","onChange","autoFocus","onBlur","ProfileInfo","profile","photos","large","discriptionBlock","personalPhoto","aboutMe","contacts","instagram","posts","message","likesCount","newPostText","setStatus","profileReducer","newPost","newText","Post","MyPosts","postsElements","map","p","newPostElement","createRef","postsBlock","text","current","updateNewPostText","placeholder","cols","rows","ref","onClick","addPost","add_post","MyPostsContainer","profilePage","updateNewPostTextActionCreator","Profile","mapStateToPropsForRedirect","withAuthRedirect","RedirectComponent","ProfileContainer","componentDidMount","params","getUserProfile","compose","withRouter","dialogs","name","messages","newMessageText","dialogsReducer","newMessage","Message","DialogItem","path","dialog","Dialogs","dialogsPage","dialogsElements","d","Dialog","key","messagesElements","m","newMessageElement","dialogsItems","addMessage","updateNewMessageText","updateNewMessageTextActionCreator","users","totalUsersCount","followingInProgress","toggleIsFetching","toggleFollowingProgress","usersReducer","u","followed","count","filter","Users","pagesCount","Math","ceil","pages","i","push","users_wrapper","selectPage","onPageChanged","user","avatar","small","userPhoto","disabled","some","unfollow_button","unfollow","follow_button","follow","UsersContainer","pageNumber","getUsers","setCurrentPage","usersPage","followSuccess","unfollowSuccess","items","totalCount","App","render","DialogsContainer","reducers","combineReducers","store","createStore","applyMiddleware","thinkMiddlaware","rerenderEntireTree","ReactDOM","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e83b2259.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3OFj2\",\"dialog\":\"Dialogs_dialog__3fVZr\",\"dialogsItems\":\"Dialogs_dialogsItems__3fcb5\",\"messages\":\"Dialogs_messages__39mll\",\"addMessage\":\"Dialogs_addMessage__1fBss\",\"add_post\":\"Dialogs_add_post__2QLIl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_wrapper\":\"Users_users_wrapper__1ZOyV\",\"selectPage\":\"Users_selectPage__1cRU0\",\"avatar\":\"Users_avatar__1H79U\",\"follow_button\":\"Users_follow_button__33hVr\",\"unfollow_button\":\"Users_unfollow_button__B7zj3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2jO0p\",\"logo_name\":\"Header_logo_name__3P1L2\",\"login\":\"Header_login__F3Un5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3ogJB\",\"posts\":\"MyPosts_posts__32EhU\",\"add_post\":\"MyPosts_add_post__3RIGb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__25Oqk\",\"imageProfile\":\"ProfileInfo_imageProfile__3w2xH\",\"personalPhoto\":\"ProfileInfo_personalPhoto__1YfGp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3JSLM\",\"item\":\"Navbar_item__tfWnZ\",\"activeLink\":\"Navbar_activeLink__DEEo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1UrQg\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.d5c02aa6.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__3NrQu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1B3C-\"};","module.exports = __webpack_public_path__ + \"static/media/user.abb5b607.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'Settings content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            This will be news\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;\r\n\r\n","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;\r\n\r\n","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;\r\n\r\n","import React from 'react';\r\nimport s from './Login.module.css';\r\n\r\nconst Login = (props) => {\r\n    return (\r\n        <div className={s.login}>\r\n            login page  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://img.icons8.com/carbon-copy/100/000000/minecraft-logo.png\" />\r\n            <div className={s.logo_name}>Social netWork</div>\r\n            <div className={s.login}>\r\n                {props.isAuth ? props.login:<NavLink to={'/login'}>Login</NavLink>}\r\n                \r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\twithCredentials: true,\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n\theaders: {\r\n\t\t'API-KEY': 'be9a3549-d8d6-4d97-a73c-6593dde1f694'\r\n\t}\r\n});\r\n\r\nexport const usersAPI = {\r\n\r\n\tgetUsers(currentPage = 1, pageSize = 10) {\r\n\t\treturn instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.data;\r\n\t\t\t});\r\n\t},\r\n\tfollow(userId) {\r\n\t\treturn instance.post(`follow/${userId}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.data;\r\n\t\t\t});\r\n\t},\r\n\tunfollow(userId) {\r\n\t\treturn instance.delete(`follow/${userId}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.data;\r\n\t\t\t});\r\n\t},\r\n\tgetProfile(userId) {\r\n\t\tconsole.warn('Obselete method. Please profileAPI object');\r\n\t\treturn profileAPI.getProfile(userId);\r\n\t},\r\n}\r\n\r\nexport const profileAPI = {\r\n\tgetProfile(userId) {\r\n\t\treturn instance.get(`profile/` + userId);\r\n\t},\r\n\tgetStatus(userId) {\r\n\t\treturn instance.get(`profile/status/` + userId);\r\n\t},\r\n\tupdateStatus(status) {\r\n\t\treturn instance.put(`profile/status/`, {status: status});\r\n\t},\r\n}\r\n\r\nexport const authAPI = {\r\n\tauthMe() {\r\n\t\treturn instance.get(`auth/me`)\r\n\t},\r\n}\r\n\r\n\r\n","import { authAPI } from '../api/api';\r\nconst TOGGLE_IS_FETCHING = 'IS_FETCHING';\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nlet initializeState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: true,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initializeState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            };\r\n        case TOGGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (id, email, login) => (\r\n    { type: SET_USER_DATA, data: { id, email, login } });\r\nexport const toggleIsFetching = (isFetching) => (\r\n    { type: TOGGLE_IS_FETCHING, isFetching });\r\n\r\nexport default authReducer;\r\n\r\nexport const getAuthUserData = () => {\r\n    return (dispatch) => {\r\n        authAPI.authMe()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    let { id, login, email } = response.data.data;\r\n                    dispatch(setAuthUserData(id, login, email));\r\n                }\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { getAuthUserData } from '../../redux/auth-reducer';\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData()\r\n        //old request which add to thunk and API(DAL)\r\n        // .then(response => {\r\n        //         if (response.data.resultCode === 0) {\r\n        //             let { id, login, email } = response.data.data;\r\n        //             this.props.setAuthUserData(id, login, email);\r\n        //         }\r\n        //     });\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\r\n        //     withCredentials: true\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { getAuthUserData })(HeaderContainer);\r\n\r\n","import React from \"react\";\r\nimport preloader from \"../../../asets/images/preloader.gif\";\r\nimport s from './Preloader.module.css';\r\n\r\n\r\nlet Preloader = () => {\r\n\treturn <div><img className={s.preloader} src={preloader} /></div>\t\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activatedMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n    deactivatedMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activatedMode}>{this.props.status || '-----'}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange}\r\n                               autoFocus={true}\r\n                               onBlur={this.deactivatedMode}\r\n                               value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    if (!props.profile.photos.large) {\r\n        return (`photo didn't find`)\r\n    }\r\n    return (\r\n        <div>\r\n            {/* <div>\r\n                <img className={s.imageProfile}\r\n                    src='http://getwallpapers.com/wallpaper/full/0/c/8/1311997-sound-wave-wallpaper-1920x1080-for-ipad-pro.jpg'/>\r\n            </div> */}\r\n            <div className={s.discriptionBlock}>\r\n                <img className={s.personalPhoto} src={props.profile.photos.large}/>\r\n                <div><ProfileStatus status={props.status} updateStatus={props.updateStatus}/></div>\r\n                <p>{props.profile.aboutMe}</p>\r\n                <p>{props.profile.contacts.instagram}</p>\r\n                <p>{props.profile.userId}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n","import {usersAPI, profileAPI} from '../api/api';\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\nlet initializeState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how do you feel? I have not seen you since I was in Berlin!', likesCount: 12},\r\n        {id: 2, message: 'Wow! It is great! When are you going there?', likesCount: 12}\r\n    ],\r\n    newPostText: '',\r\n    profile: null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initializeState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST});\r\nexport const updateNewPostTextActionCreator = (text) =>\r\n    ({type: UPDATE_NEW_POST_TEXT, newText: text});\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile});\r\nexport const setStatus = (status) => ({type: SET_STATUS, status});\r\n\r\nexport default profileReducer;\r\n\r\nexport const getUserProfile = (userId) => {\r\n    return (dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfile(response.data));\r\n            });\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId) => (dispatch) => {\r\n    profileAPI.getStatus(userId)\r\n        .then(response => {\r\n            dispatch(setStatus(response.data));\r\n        });\r\n}\r\n\r\nexport const updateStatus = (status) => (dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status));\r\n            }\r\n        });\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return <div className={s.item}>\r\n        <img src=\"https://img.icons8.com/bubbles/100/000000/flag-person-male.png\"/>\r\n        <div>\r\n            {props.message}\r\n            <span> Like</span> {props.likesCount}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from '../Post/Post';\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost()\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange}\r\n                              placeholder='Add post'\r\n                              cols='45'\r\n                              rows='5'\r\n                              ref={newPostElement}\r\n                              value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost} className={s.add_post}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;\r\n\r\n","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n//вариинт без создания connect\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState();\r\n//                 let onAddPost = () => {\r\n//                     store.dispatch(addPostActionCreator());\r\n//                 }\r\n//\r\n//                 let onPostChange = (text) => {\r\n//                     let action = updateNewPostTextActionCreator(text)\r\n//                     store.dispatch(action);\r\n//                 }\r\n//\r\n//                 return <MyPosts\r\n//                     addPost={onAddPost}\r\n//                     updateNewPostText={onPostChange}\r\n//                     posts={state.profilePage.posts}\r\n//                     newPostText={state.profilePage.newPostText}/>\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator());\r\n        },\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\n//map to presentation component\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} \r\n                         status={props.status} \r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n}) \r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount = () => {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = 1049;\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        //insted of return presentation comp we return login\r\n        if (!this.props.isAuth) return <Redirect to='/login' />\r\n        return <Profile {...this.props} \r\n                profile={this.props.profile} \r\n                status={this.props.status} \r\n                updateStatus={this.props.updateStatus}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n})\r\n\r\n// wrapper for action in compose\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n","const SEND_MESSAGE = 'ADD-MESSAGE';\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\n\r\nlet initializeState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'I can met with you'}\r\n    ],\r\n    newMessageText: ''\r\n};\r\n\r\nconst dialogsReducer = (state = initializeState, action) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let newMessage = {\r\n                id: 4,\r\n                message: state.newMessageText\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n                newMessageText: ''\r\n            };\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newText\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE});\r\nexport const updateNewMessageTextActionCreator = (text) => ({type: UPDATE_NEW_MESSAGE_TEXT, newText: text});\r\n\r\nexport default dialogsReducer;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./Dialog/Dialog\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    let newMessageElement = React.createRef();\r\n\r\n    let onSendMessage = () => {\r\n        props.addMessage();\r\n    }\r\n    let onMessageChange = () => {\r\n        let text = newMessageElement.current.value;\r\n        props.updateNewMessageText(text);\r\n    }\r\n    //return login page\r\n    if(!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div className={s.addMessage}>\r\n                <textarea onChange={onMessageChange}\r\n                          placeholder='Enter your message'\r\n                          cols='35'\r\n                          rows='5'\r\n                          ref={newMessageElement}\r\n                          value={props.newMessageText}/>\r\n                    <div>\r\n                        <button onClick={onSendMessage} className={s.add_post}>Send message</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { sendMessageCreator, updateNewMessageTextActionCreator, }\r\n    from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\n\r\n// const DialogsContainer = () => {\r\n// return (\r\n//     <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().dialogsPage;\r\n//             let onAddMessage = () => {\r\n//                 store.dispatch(sendMessageCreator());\r\n//             }\r\n//             let onMessageChange = (text) => {\r\n//                 let action = updateNewMessageTextCreator(text)\r\n//                 store.dispatch(action);\r\n//             }\r\n//             return <Dialogs\r\n//                 addMessage={onAddMessage}\r\n//                 updateNewMessageText={onMessageChange}\r\n//                 dialogsPage={state}/>\r\n//             }\r\n//         }\r\n//     </StoreContext.Consumer>)\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: () => {\r\n            dispatch(sendMessageCreator())\r\n        },\r\n        updateNewMessageText: (text) => {\r\n            let action = updateNewMessageTextActionCreator(text);\r\n            dispatch(action);\r\n        },\r\n    }\r\n}\r\n// wrapper for action in compose\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import {usersAPI} from '../api/api'\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'TOGGLE_IS_FOLLOWING_IN_PROGRESS';\r\n\r\nlet initializeState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [1, 2]\r\n};\r\n\r\nconst usersReducer = (state = initializeState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId });\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId });\r\nexport const setUsers = (users) => ({ type: SET_USERS, users });\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage });\r\nexport const setUsersTotalCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount });\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOGGLE_IS_FOLLOWING_IN_PROGRESS, isFetching, userId });\r\n\r\n\r\n//thunks users\r\nexport const getUsers = (currentPage, pageSize) => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setUsersTotalCount(data.totalCount))\r\n        });\r\n    }\r\n}\r\n\r\nexport const follow = (userId) => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.follow(userId)\r\n        .then(response => {\r\n        if (response.resultCode === 0) {\r\n        dispatch(followSuccess(userId));\r\n    }\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n        });\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        usersAPI.unfollow(userId)\r\n        .then(response => {\r\n        if (response.resultCode === 0) {\r\n        dispatch(unfollowSuccess(userId));\r\n    }\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer;","import React from \"react\";\r\nimport s from './Users.module.css';\r\nimport userPhoto from '../../asets/images/user.png'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nlet Users = (props) => {\r\n    //вычисляем кол-во страниц для отрисовки\r\n    debugger;\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        {\r\n            pages.push(i);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.users_wrapper}>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p && s.selectPage}\r\n                        onClick={(e) => {\r\n                            props.onPageChanged(p);\r\n                        }}>{p}</span>\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                    <div className={s.user}>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <img className={s.avatar} src={u.photos.small != null ? u.photos.small : userPhoto} />\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingInProgress.some(id => id === u.id)} className={s.unfollow_button} \r\n                                    onClick={() => {\r\n                                    props.unfollow(u.id)   \r\n                                    //give this to thunk in users-reducer\r\n                                    // props.toggleFollowingProgress(true, u.id);\r\n                                    // usersAPI.unfollow(u.id)\r\n                                    //     .then(response => {\r\n                                    //         if (response.resultCode == 0) {\r\n                                    //             props.unfollow(u.id);\r\n                                    //         }\r\n                                    //         props.toggleFollowingProgress(false, u.id);\r\n                                    //     })\r\n                                    //old request for delete\r\n                                    // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {\r\n                                    //     withCredentials: true,\r\n                                    //     headers: {\r\n                                    //         'API-KEY': 'be9a3549-d8d6-4d97-a73c-6593dde1f694'}})\r\n                                }}>Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)} className={s.follow_button} \r\n                                    onClick={() => {\r\n                                    props.follow(u.id)\r\n                                    //give this to thunk in users-reducer\r\n                                    // props.toggleFollowingProgress(true, u.id);\r\n                                    // usersAPI.follow(u.id)\r\n                                    // .then(response => {\r\n                                    //         if (response.resultCode == 0) {\r\n                                    //             props.follow(u.id);\r\n                                    //         }\r\n                                    //         props.toggleFollowingProgress(false, u.id);\r\n                                    //     })\r\n                                    //old request for post\r\n                                    // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,{}, {\r\n                                    //     withCredentials: true,\r\n                                    //     headers: {\r\n                                    //         'API-KEY': 'be9a3549-d8d6-4d97-a73c-6593dde1f694'\r\n                                    //     }})\r\n                                }}>Follow</button>}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </div>\r\n                    <div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                        <div>{\"u.location.country\"}</div>\r\n                    </div>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow,\r\n    toggleFollowingProgress,\r\n    getUsers,\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        //old method which contain thunk now\r\n        /*usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(data.items)\r\n            this.props.setUsersTotalCount(data.totalCount)\r\n        });*/\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n        this.props.setCurrentPage(pageNumber);\r\n\r\n        //old method which contain thunk now but use another data(pageNumber)\r\n        /*this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n        usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(data.items)\r\n        });*/\r\n    }\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader /> : null}\r\n            <Users pageSize={this.props.pageSize}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                unfollow={this.props.unfollow}\r\n                follow={this.props.follow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n/*const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId));\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setUsersTotalCount: (totalCount) => {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\n// wrapper for action in compose\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage,\r\n        toggleFollowingProgress, getUsers,\r\n    }),\r\n    withAuthRedirect\r\n)(UsersContainer)","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport {Route} from 'react-router-dom';\nimport Login from './components/Login/Login';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\n\nconst App = (props) => {\n    return (\n        <div className='all_wrapper'>\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/login'\n                           render={() => <Login/>}/>\n                    <Route path='/profile/:userId?'\n                           render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs'\n                           render={() => <DialogsContainer/>}/>\n                    <Route path='/news'\n                           render={() => <News/>}/>\n                    <Route path='/music'\n                           render={() => <Music/>}/>\n                    <Route path='/settings'\n                           render={() => <Settings/>}/>\n                    <Route path='/users'\n                           render={() => <UsersContainer/>}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport thinkMiddlaware from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n\t//login page\r\n\tprofilePage: profileReducer,\r\n\tdialogsPage: dialogsReducer,\r\n\tusersPage: usersReducer,\r\n\tauth: authReducer\r\n});\r\n\r\nlet store = createStore(reducers,applyMiddleware(thinkMiddlaware));\r\nwindow.store = store;\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/redux-store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n//перерисовка всего\nlet rerenderEntireTree = (state) => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>, document.getElementById('root')\n    );\n}\n//вызываем рендер и передаём параметр стора getstate,который\n//возвращает store\nrerenderEntireTree(store.getState());\nstore.subscribe(() => {\n    let state = store.getState();\n    rerenderEntireTree(state);\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}